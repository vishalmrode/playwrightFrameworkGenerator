'use strict';

var path = require('path');
var StackUtils = require('stack-utils');
var url = require('url');

function _interopDefault (e) { return e && e.__esModule ? e : { default: e }; }

var path__default = /*#__PURE__*/_interopDefault(path);
var StackUtils__default = /*#__PURE__*/_interopDefault(StackUtils);
var url__default = /*#__PURE__*/_interopDefault(url);

const PLAYWRIGHT_TEST_PATH = path__default.default.dirname(require.resolve("@playwright/test/package.json"));
let PLAYWRIGHT_PATH;
try {
  PLAYWRIGHT_PATH = path__default.default.dirname(
    require.resolve("playwright/package.json", { paths: [PLAYWRIGHT_TEST_PATH] })
  );
} catch (err) {
}
const PLAYWRIGHT_CORE_PATH = path__default.default.dirname(
  require.resolve("playwright-core/package.json", {
    paths: [PLAYWRIGHT_PATH || PLAYWRIGHT_TEST_PATH]
  })
);
const REPLAYIO_PLAYWRIGHT_PATH = path__default.default.dirname(require.resolve("@replayio/playwright/package.json"));
const nodeInternals = StackUtils__default.default.nodeInternals();
const nodeMajorVersion = +process.versions.node.split(".")[0];
const stackUtils = new StackUtils__default.default({ internals: nodeInternals });
function captureRawStack() {
  const stackTraceLimit = Error.stackTraceLimit;
  Error.stackTraceLimit = 50;
  const error = new Error();
  const stack = error.stack || "";
  Error.stackTraceLimit = stackTraceLimit;
  return stack.split("\n");
}
function parseStackTraceLine(line) {
  if (!process.env.PWDEBUGIMPL && nodeMajorVersion < 16 && nodeInternals.some((internal) => internal.test(line)))
    return null;
  const frame = stackUtils.parseLine(line);
  if (!frame) return null;
  if (!process.env.PWDEBUGIMPL && (frame.file?.startsWith("internal") || frame.file?.startsWith("node:")))
    return null;
  if (!frame.file) return null;
  const file = frame.file.startsWith("file://") ? url__default.default.fileURLToPath(frame.file) : path__default.default.resolve(process.cwd(), frame.file);
  return {
    file,
    line: frame.line || 0,
    column: frame.column || 0,
    function: frame.function
  };
}
function filterStackFile(file) {
  if (!process.env.PWDEBUGIMPL && file.startsWith(PLAYWRIGHT_TEST_PATH)) return false;
  if (!process.env.PWDEBUGIMPL && PLAYWRIGHT_PATH && file.startsWith(PLAYWRIGHT_PATH)) return false;
  if (!process.env.PWDEBUGIMPL && file.startsWith(PLAYWRIGHT_CORE_PATH)) return false;
  if (!process.env.PWDEBUGIMPL && file.startsWith(REPLAYIO_PLAYWRIGHT_PATH)) return false;
  return true;
}
function filteredStackTrace(rawStack) {
  const frames = [];
  for (const line of rawStack) {
    const frame = parseStackTraceLine(line);
    if (!frame || !frame.file) continue;
    if (!filterStackFile(frame.file)) continue;
    frames.push(frame);
  }
  return frames;
}

exports.captureRawStack = captureRawStack;
exports.filteredStackTrace = filteredStackTrace;
