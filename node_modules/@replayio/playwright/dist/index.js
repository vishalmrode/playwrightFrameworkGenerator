'use strict';

var getRuntimePath = require('./_bundled/@replay-cli/shared/runtime/getRuntimePath.js');
require('./_bundled/@replay-cli/shared/logger.js');
require('node-fetch');
var metadata = require('./_bundled/@replayio/test-utils/metadata.js');
require('node:os');
require('undici');
require('./_bundled/@replay-cli/shared/config.js');
require('./_bundled/@replay-cli/shared/session/waitForPackageInfo.js');
require('./_bundled/@replay-cli/shared/mixpanelClient.js');
require('fs-extra');
require('node:assert/strict');
require('path');
require('./_bundled/@replay-cli/shared/recording/config.js');
require('./_bundled/@replay-cli/shared/recording/readRecordingLog.js');
require('node:path');
require('node:fs');
require('os');
require('fs');
require('superstruct');
require('./_bundled/@replay-cli/shared/recording/metadata/legacy/test/v1.js');
require('./_bundled/@replay-cli/shared/recording/metadata/legacy/test/v2.js');
require('./_bundled/@replay-cli/shared/launchDarklylient.js');
require('ws');
require('fs/promises');
require('crypto');
require('node:child_process');
require('uuid');
require('jsonata');
require('sha-1');
var fixture = require('./fixture.js');

function getDeviceConfig() {
  const executablePath = getExecutablePath();
  const env = {
    ...process.env,
    RECORD_ALL_CONTENT: 1,
    RECORD_REPLAY_ENABLE_ASSERTS: process.env.RECORD_REPLAY_ENABLE_ASSERTS,
    // it doesn't log anything eagerly but it makes it possible to enable verbose logs with DEBUG=pw:browser
    RECORD_REPLAY_VERBOSE: 1,
    RECORD_REPLAY_METADATA: void 0,
    RECORD_REPLAY_METADATA_FILE: metadata.initMetadataFile(fixture.metadataFilePath)
  };
  if (process.env.RECORD_REPLAY_NO_RECORD) {
    env.RECORD_ALL_CONTENT = "";
    env.RECORD_REPLAY_DRIVER = __filename;
  }
  return {
    launchOptions: {
      get executablePath() {
        if (!executablePath) {
          throw new Error(`replay-chromium is not supported on this platform`);
        }
        return executablePath;
      },
      env
    },
    defaultBrowserType: "chromium"
  };
}
function getExecutablePath() {
  return getRuntimePath.getRuntimePath();
}
const devices = {
  get "Replay Chromium"() {
    return getDeviceConfig();
  }
};
function replayReporter(config = {}) {
  return ["@replayio/playwright/reporter", config];
}
fixture.addReplayFixture();

exports.devices = devices;
exports.getExecutablePath = getExecutablePath;
exports.replayReporter = replayReporter;
