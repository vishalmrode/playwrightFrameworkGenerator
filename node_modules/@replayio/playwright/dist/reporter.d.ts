import type { FullConfig, Reporter, TestCase, TestResult } from "@playwright/test/reporter";
import { ReplayReporter, ReplayReporterConfig, TestMetadataV2 } from "./_bundled/@replayio/test-utils";
type ReplayPlaywrightRecordingMetadata = {
    title: string;
    test: TestMetadataV2.TestRun;
};
export interface ReplayPlaywrightConfig extends Omit<ReplayReporterConfig<ReplayPlaywrightRecordingMetadata>, "metadataKey" | "metadata"> {
    captureTestFile?: boolean;
}
export default class ReplayPlaywrightReporter implements Reporter {
    reporter: ReplayReporter<ReplayPlaywrightRecordingMetadata>;
    captureTestFile: boolean;
    config: ReplayPlaywrightConfig;
    private _executedProjects;
    constructor(config: ReplayPlaywrightConfig);
    private _getTestExecutionId;
    getSource(test: TestCase): {
        title: string;
        scope: string[];
    };
    onBegin({ version }: FullConfig): void;
    private _registerExecutedProject;
    onTestBegin(test: TestCase, testResult: TestResult): void;
    private _processAttachments;
    onTestEnd(test: TestCase, result: TestResult): void;
    onEnd(): Promise<void>;
    parseArguments(apiName: string, params: any): any[];
}
export {};
