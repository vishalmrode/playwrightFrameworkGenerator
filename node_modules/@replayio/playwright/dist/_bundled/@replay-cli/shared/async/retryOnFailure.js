'use strict';

var timeoutAfter = require('./timeoutAfter.js');

async function retry(asyncFunction, backOffStrategy, onFail, maxAttempts = 5) {
  let currentAttempt = 0;
  while (currentAttempt <= maxAttempts) {
    currentAttempt++;
    try {
      return await asyncFunction();
    } catch (error) {
      if (onFail) {
        onFail(error, currentAttempt, maxAttempts);
      }
      if (currentAttempt == maxAttempts) {
        throw error;
      }
      await timeoutAfter.timeoutAfter(backOffStrategy(currentAttempt));
    }
  }
  throw Error("ShouldBeUnreachable");
}
async function retryWithExponentialBackoff(asyncFunction, onFail, maxTries) {
  const backoff = (iteration) => 2 ** iteration * 100 + jitter();
  return retry(asyncFunction, backoff, onFail, maxTries);
}
async function retryWithLinearBackoff(asyncFunction, onFail, maxTries) {
  const backoff = () => 100 + jitter();
  return retry(asyncFunction, backoff, onFail, maxTries);
}
function jitter() {
  return Math.random() * 100;
}

exports.retryWithExponentialBackoff = retryWithExponentialBackoff;
exports.retryWithLinearBackoff = retryWithLinearBackoff;
