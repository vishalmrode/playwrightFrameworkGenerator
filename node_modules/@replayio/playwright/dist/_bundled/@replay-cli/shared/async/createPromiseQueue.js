'use strict';

var createDeferred = require('./createDeferred.js');

function createGroup(root) {
  let pendingCount = 0;
  let idleDeferred;
  return {
    add: (action) => {
      pendingCount++;
      const finalize = () => {
        pendingCount--;
        if (!pendingCount) {
          idleDeferred?.resolve();
          idleDeferred = void 0;
        }
      };
      return root.add(
        () => action().then(
          (result) => {
            finalize();
            return result;
          },
          (error) => {
            finalize();
            throw error;
          }
        )
      );
    },
    fork: () => createGroup(root),
    waitUntilIdle: () => {
      if (!pendingCount) {
        return Promise.resolve(void 0);
      }
      idleDeferred ??= createDeferred.createDeferred();
      return idleDeferred.promise;
    }
  };
}
function createPromiseQueue({ concurrency }) {
  const jobs = [];
  let activeCount = 0;
  function run() {
    if (activeCount === concurrency) {
      return;
    }
    const job = jobs.shift();
    if (!job) {
      return;
    }
    activeCount++;
    job.action().then(
      (result) => {
        activeCount--;
        job.deferred.resolve(result);
        run();
      },
      (error) => {
        activeCount--;
        job.deferred.reject(error);
        run();
      }
    );
  }
  return createGroup({
    add: (action) => {
      const deferred = createDeferred.createDeferred();
      jobs.push({ action, deferred });
      run();
      return deferred.promise;
    }
  });
}

exports.createPromiseQueue = createPromiseQueue;
