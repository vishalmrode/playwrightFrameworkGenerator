'use strict';

const STATUS_PENDING = "pending";
const STATUS_REJECTED = "rejected";
const STATUS_RESOLVED = "resolved";
function createDeferred(data, debugLabel) {
  let rejection = void 0;
  let resolution = void 0;
  let status = STATUS_PENDING;
  let rejectPromise;
  let resolvePromise;
  const promise = new Promise((resolve, reject) => {
    rejectPromise = reject;
    resolvePromise = resolve;
  });
  promise.catch(() => {
  });
  function assertPending() {
    if (status !== STATUS_PENDING) {
      throw Error(`Deferred has already been ${status}`);
    }
  }
  const deferred = {
    data,
    debugLabel,
    promise,
    reject(error) {
      assertPending();
      deferred.rejectIfPending(error);
    },
    rejectIfPending(error) {
      if (status === STATUS_PENDING) {
        rejection = error;
        status = STATUS_REJECTED;
        rejectPromise(error);
      }
    },
    resolve(value) {
      assertPending();
      deferred.resolveIfPending(value);
    },
    resolveIfPending(value) {
      if (status === STATUS_PENDING) {
        resolution = value;
        status = STATUS_RESOLVED;
        resolvePromise(value);
      }
    },
    get status() {
      return status;
    },
    get rejection() {
      return rejection;
    },
    get resolution() {
      return resolution;
    }
  };
  return deferred;
}

exports.STATUS_PENDING = STATUS_PENDING;
exports.STATUS_REJECTED = STATUS_REJECTED;
exports.STATUS_RESOLVED = STATUS_RESOLVED;
exports.createDeferred = createDeferred;
