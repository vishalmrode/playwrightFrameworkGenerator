import { Callback, PropertyDict, init as initMixpanel } from "mixpanel";
export type Properties = Record<string, unknown>;
type MixpanelExternal = ReturnType<typeof initMixpanel>;
export type MixpanelImplementation = {
    init: MixpanelExternal["init"];
    track: (eventName: string, properties: PropertyDict, callback: Callback) => void;
};
export declare function appendAdditionalProperties(properties: Properties): void;
export declare function closeMixpanel(): Promise<void>;
export declare function createAsyncFunctionWithTracking<Params extends Array<any>, Type>(createPromise: (...args: Params) => Promise<Type>, eventName: string, properties?: Properties | ((result: Type | undefined, error: any) => Properties)): (...args: Params) => Promise<Type>;
export declare function getQueueSizeForTests(): number;
export declare function mockForTests(mock: MixpanelImplementation | undefined): void;
export declare function trackAsyncEvent<Type>(promise: Promise<Type>, eventName: string, properties?: Properties | ((result: Type | undefined, error: any) => Properties)): Promise<Type>;
export declare function trackEvent(eventName: string, properties?: Properties): void;
export {};
