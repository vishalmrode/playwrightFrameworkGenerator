'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var superstruct = require('superstruct');
var env = require('../env.js');

const isUuid = require("is-uuid");
const testResult = superstruct.enums(["passed", "failed", "timedOut", "skipped", "unknown"]);
const testError = superstruct.object({
  message: superstruct.string(),
  line: superstruct.optional(superstruct.number()),
  column: superstruct.optional(superstruct.number())
});
const test = superstruct.object({
  id: superstruct.optional(superstruct.string()),
  parentId: superstruct.optional(superstruct.string()),
  title: superstruct.string(),
  path: superstruct.optional(superstruct.array(superstruct.string())),
  relativePath: superstruct.optional(superstruct.string()),
  result: testResult,
  error: superstruct.optional(testError),
  relativeStartTime: superstruct.optional(superstruct.number()),
  duration: superstruct.optional(superstruct.number()),
  steps: superstruct.optional(superstruct.array(superstruct.any()))
});
const v1_0_0 = superstruct.object({
  suite: superstruct.optional(env.envString("RECORD_REPLAY_METADATA_TEST_SUITE")),
  file: superstruct.optional(env.envString("RECORD_REPLAY_METADATA_TEST_FILE")),
  title: env.envString("RECORD_REPLAY_METADATA_TEST_TITLE"),
  path: superstruct.optional(superstruct.array(superstruct.string())),
  result: superstruct.defaulted(
    superstruct.enums(["passed", "failed", "timedOut", "skipped", "unknown"]),
    env.firstEnvValueOf("RECORD_REPLAY_METADATA_TEST_RESULT")
  ),
  // before/after all hooks
  hooks: superstruct.optional(
    superstruct.array(
      superstruct.object({
        title: superstruct.string(),
        path: superstruct.array(superstruct.string()),
        steps: superstruct.optional(superstruct.array(superstruct.any()))
      })
    )
  ),
  tests: superstruct.optional(superstruct.array(test)),
  runner: superstruct.optional(
    superstruct.defaulted(
      superstruct.object({
        name: superstruct.optional(env.envString("RECORD_REPLAY_METADATA_TEST_RUNNER_NAME")),
        version: superstruct.optional(env.envString("RECORD_REPLAY_METADATA_TEST_RUNNER_VERSION")),
        plugin: superstruct.optional(env.envString("RECORD_REPLAY_METADATA_TEST_RUNNER_PLUGIN"))
      }),
      {}
    )
  ),
  run: superstruct.optional(
    superstruct.defaulted(
      superstruct.object({
        id: superstruct.defaulted(
          superstruct.define("uuid", (v) => isUuid.v4(v)),
          env.firstEnvValueOf("RECORD_REPLAY_METADATA_TEST_RUN_ID", "RECORD_REPLAY_TEST_RUN_ID")
        ),
        title: superstruct.optional(env.envString("RECORD_REPLAY_METADATA_TEST_RUN_TITLE")),
        mode: superstruct.optional(env.envString("RECORD_REPLAY_METADATA_TEST_RUN_MODE"))
      }),
      {}
    )
  ),
  reporterErrors: superstruct.defaulted(superstruct.array(superstruct.any()), []),
  version: superstruct.defaulted(superstruct.number(), () => 1)
});
var v1 = {
  "1.0.0": v1_0_0
};

exports.default = v1;
