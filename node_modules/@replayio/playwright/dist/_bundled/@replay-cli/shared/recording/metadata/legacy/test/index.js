'use strict';

var superstruct = require('superstruct');
var v1 = require('./v1.js');
var v2 = require('./v2.js');

const VERSION = "2.1.0";
const versions = {
  ...v1.default,
  ...v2.default
};
function validate(test) {
  if (!test) {
    throw new Error("Test metadata does not exist");
  }
  return init(test);
}
function getVersion(k) {
  const v = versions[k];
  if (!v) {
    console.warn(`Unable to validate unknown version of test metadata:${k} `);
    return superstruct.any();
  }
  return v;
}
function init(data = {}) {
  let version = VERSION;
  if ("version" in data && typeof data.version === "number") {
    version = "1.0.0";
  } else if ("schemaVersion" in data && typeof data.schemaVersion === "string") {
    version = data.schemaVersion;
  }
  let schema;
  try {
    schema = getVersion(version);
  } catch {
    console.warn(
      `Unable to validate unknown version of test metadata: ${version || "Unspecified"}`
    );
    return {
      test: data
    };
  }
  try {
    return {
      test: superstruct.create(data, schema)
    };
  } catch (e) {
    console.error(e);
    console.error("Metadata:");
    console.error(JSON.stringify(data, void 0, 2));
    return {};
  }
}

exports.init = init;
exports.validate = validate;
