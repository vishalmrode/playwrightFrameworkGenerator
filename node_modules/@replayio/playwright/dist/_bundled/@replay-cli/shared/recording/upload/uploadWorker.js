'use strict';

var createDeferred = require('../../async/createDeferred.js');
var launchDarklylient = require('../../launchDarklylient.js');
var ProtocolClient = require('../../protocol/ProtocolClient.js');
var createSettledDeferred = require('../createSettledDeferred.js');
var removeFromDisk = require('../removeFromDisk.js');
var uploadCrashData = require('./uploadCrashData.js');
var uploadRecording = require('./uploadRecording.js');

function createUploadWorker({
  accessToken,
  deleteOnSuccess,
  processingBehavior
}) {
  const client = new ProtocolClient.default(accessToken);
  const deferredAuthenticated = createDeferred.createDeferred();
  const deferredActions = [];
  let multiPartUpload = false;
  (async () => {
    multiPartUpload = await launchDarklylient.getFeatureFlagValue("cli-multipart-upload", false);
    try {
      await client.waitUntilAuthenticated();
      deferredAuthenticated.resolve(true);
    } catch (error) {
      deferredAuthenticated.reject(error);
    }
  })();
  return {
    upload: (recording) => {
      const deferred = createSettledDeferred.createSettledDeferred(recording, async () => {
        await deferredAuthenticated.promise;
        if (recording.recordingStatus === "crashed") {
          await uploadCrashData.uploadCrashedData(client, recording);
        } else {
          await uploadRecording.uploadRecording(client, recording, { multiPartUpload, processingBehavior });
        }
      });
      deferredActions.push(deferred);
      return deferred;
    },
    end: async () => {
      try {
        await deferredAuthenticated.promise;
      } catch (err) {
        client.close();
        throw err;
      }
      await Promise.all(deferredActions.map((deferred) => deferred.promise));
      client.close();
      const recordings = deferredActions.map((action) => action.data);
      if (deleteOnSuccess) {
        recordings.filter((recording) => recording.uploadStatus === "uploaded").forEach((recording) => {
          removeFromDisk.removeFromDisk(recording.id);
        });
      }
      return recordings;
    }
  };
}

exports.createUploadWorker = createUploadWorker;
