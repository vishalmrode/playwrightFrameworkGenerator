'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var superstruct = require('superstruct');
var env = require('../env.js');

const testError = superstruct.object({
  name: superstruct.string(),
  message: superstruct.string(),
  line: superstruct.optional(superstruct.number()),
  column: superstruct.optional(superstruct.number())
});
const userActionEvent = superstruct.object({
  data: superstruct.object({
    id: superstruct.string(),
    parentId: superstruct.nullable(superstruct.string()),
    category: superstruct.enums(["assertion", "command", "other"]),
    command: superstruct.object({
      arguments: superstruct.array(superstruct.string()),
      name: superstruct.string()
    }),
    scope: superstruct.nullable(superstruct.array(superstruct.string())),
    error: superstruct.nullable(testError)
  })
});
const testResult = superstruct.enums(["failed", "passed", "skipped", "timedOut", "unknown"]);
const test_v2_0_0 = superstruct.object({
  events: superstruct.object({
    afterAll: superstruct.array(userActionEvent),
    afterEach: superstruct.array(userActionEvent),
    beforeAll: superstruct.array(userActionEvent),
    beforeEach: superstruct.array(userActionEvent),
    main: superstruct.array(userActionEvent)
  }),
  approximateDuration: superstruct.number(),
  result: testResult,
  source: superstruct.object({
    scope: superstruct.array(superstruct.string()),
    title: superstruct.string()
  }),
  error: superstruct.nullable(testError)
});
const v2_0_0 = superstruct.object({
  approximateDuration: superstruct.number(),
  environment: superstruct.object({
    errors: superstruct.defaulted(
      superstruct.array(
        superstruct.object({
          code: superstruct.number(),
          detail: superstruct.nullable(superstruct.string()),
          name: superstruct.string(),
          message: superstruct.string()
        })
      ),
      []
    ),
    pluginVersion: superstruct.string(),
    testRunner: superstruct.object({
      name: superstruct.string(),
      version: superstruct.string()
    })
  }),
  result: testResult,
  resultCounts: superstruct.record(testResult, superstruct.number()),
  schemaVersion: superstruct.defaulted(superstruct.string(), () => "2.0.0"),
  source: superstruct.object({
    path: superstruct.string(),
    title: superstruct.string()
  }),
  tests: superstruct.array(test_v2_0_0),
  run: superstruct.defaulted(
    superstruct.object({
      id: superstruct.defaulted(
        superstruct.string(),
        env.firstEnvValueOf(
          "REPLAY_METADATA_TEST_RUN_ID",
          "RECORD_REPLAY_METADATA_TEST_RUN_ID",
          "RECORD_REPLAY_TEST_RUN_ID"
        )
      ),
      title: superstruct.optional(
        superstruct.defaulted(
          superstruct.string(),
          env.firstEnvValueOf("REPLAY_METADATA_TEST_RUN_TITLE", "RECORD_REPLAY_METADATA_TEST_RUN_TITLE")
        )
      ),
      mode: superstruct.optional(
        superstruct.defaulted(
          superstruct.string(),
          env.firstEnvValueOf("REPLAY_METADATA_TEST_RUN_MODE", "RECORD_REPLAY_METADATA_TEST_RUN_MODE")
        )
      )
    }),
    {}
  )
});
const test_v2_1_0 = superstruct.assign(
  test_v2_0_0,
  superstruct.object({
    id: superstruct.number(),
    attempt: superstruct.number()
  })
);
const test_v2_2_0 = superstruct.assign(
  test_v2_1_0,
  superstruct.object({
    executionId: superstruct.string(),
    executionGroupId: superstruct.string(),
    maxAttempts: superstruct.number()
  })
);
const v2_1_0 = superstruct.assign(
  v2_0_0,
  superstruct.object({
    tests: superstruct.array(test_v2_1_0)
  })
);
const v2_2_0 = superstruct.assign(
  v2_1_0,
  superstruct.object({
    tests: superstruct.array(test_v2_2_0)
  })
);
var v2 = {
  "2.2.0": v2_2_0,
  "2.1.0": v2_1_0,
  "2.0.0": v2_0_0
};

exports.default = v2;
