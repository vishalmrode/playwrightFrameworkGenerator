'use strict';

var fsExtra = require('fs-extra');
require('path');
var logger = require('../logger.js');
var config = require('./config.js');
var getRecordings = require('./getRecordings.js');
var readRecordingLog = require('./readRecordingLog.js');
var types = require('./types.js');

function getAssetsUsageMap(recordings) {
  const usageMap = {};
  for (const recording of recordings) {
    for (const sourceMap of recording.metadata.sourceMaps) {
      usageMap[sourceMap.path] ??= 0;
      usageMap[sourceMap.path]++;
      for (const originalSource of sourceMap.originalSources) {
        usageMap[originalSource.path] ??= 0;
        usageMap[originalSource.path]++;
      }
    }
  }
  return usageMap;
}
function removeFromDisk(id) {
  logger.logDebug("Removing recording", { id });
  const recordings = getRecordings.getRecordings();
  const recording = recordings.find((recording2) => recording2.id.startsWith(id));
  if (recording) {
    const assetsUsageMap = getAssetsUsageMap(recordings);
    const { metadata, path } = recording;
    metadata.sourceMaps.forEach((sourceMap) => {
      if (assetsUsageMap[sourceMap.path] === 1) {
        logger.logDebug("Removing recording source-map file", { sourceMap });
        fsExtra.removeSync(sourceMap.path);
        fsExtra.removeSync(sourceMap.path.replace(/\.map$/, ".lookup"));
      }
      sourceMap.originalSources.forEach((source) => {
        if (assetsUsageMap[source.path] === 1) {
          logger.logDebug("Removing recording original source file", { source });
          fsExtra.removeSync(source.path);
        }
      });
    });
    if (path) {
      logger.logDebug("Removing recording data file", { path });
      fsExtra.removeSync(path);
    }
    const filteredLogs = readRecordingLog.readRecordingLog().filter((entry) => {
      switch (entry.kind) {
        case types.RECORDING_LOG_KIND.originalSourceAdded:
        case types.RECORDING_LOG_KIND.sourcemapAdded: {
          return entry.recordingId !== id;
        }
        default: {
          return entry.id !== id;
        }
      }
    });
    fsExtra.writeFileSync(
      config.recordingLogPath,
      filteredLogs.map((log) => JSON.stringify(log)).join("\n") + "\n",
      "utf8"
    );
  } else {
    console.log("Recording not found");
  }
}

exports.removeFromDisk = removeFromDisk;
