'use strict';

var logger = require('../logger.js');
var decode = require('../strings/decode.js');
var GraphQLError = require('./GraphQLError.js');
var queryGraphQL = require('./queryGraphQL.js');

async function fetchAuthInfoFromGraphQL(accessToken) {
  logger.logDebug("Fetching auth info from GraphQL");
  const { data, errors } = await queryGraphQL.queryGraphQL(
    "AuthInfo",
    `
        query AuthInfo {
          viewer {
            user {
              id
            }
          }
          auth {
            workspaces {
              edges {
                node {
                  id
                }
              }
            }
          }
        }
          `,
    {},
    accessToken
  );
  if (errors) {
    throw new GraphQLError.GraphQLError("Failed to fetch auth info", errors);
  }
  const response = data;
  const { viewer, auth } = response;
  const userId = viewer?.user?.id;
  const workspaceId = auth?.workspaces?.edges?.[0]?.node?.id;
  if (userId) {
    return { id: decodeId(userId), type: "user" };
  } else if (workspaceId) {
    return { id: decodeId(workspaceId), type: "workspace" };
  } else {
    throw new Error("Unrecognized type of an API key: Missing both user ID and workspace ID.");
  }
}
function decodeId(base64EncodedId) {
  const decoded = decode.base64Decode(base64EncodedId);
  const [_, id] = decoded.split(":");
  if (typeof id !== "string") {
    throw new Error(`Unrecognized ID format: ${base64EncodedId}`);
  }
  return id;
}

exports.fetchAuthInfoFromGraphQL = fetchAuthInfoFromGraphQL;
