'use strict';

var os = require('os');
var path = require('path');
var getReplayPath = require('../getReplayPath.js');
var theme = require('../theme.js');

exports.runtimeMetadata = void 0;
const architecture = process.arch.startsWith("arm") ? "arm" : "x86_64";
switch (process.platform) {
  case "darwin":
    exports.runtimeMetadata = {
      architecture,
      crashpadDirectory: path.join(
        os.homedir(),
        "Library",
        "Application Support",
        "Chromium",
        "Crashpad",
        "pending"
      ),
      destinationName: "Replay-Chromium.app",
      downloadFileName: process.env.RECORD_REPLAY_CHROMIUM_DOWNLOAD_FILE || (process.arch.startsWith("arm") ? "macOS-replay-chromium-arm.tar.xz" : "macOS-replay-chromium.tar.xz"),
      path: ["Replay-Chromium.app", "Contents", "MacOS", "Chromium"],
      platform: "macOS",
      runtime: "chromium",
      sourceName: "Replay-Chromium.app"
    };
    break;
  case "linux":
    exports.runtimeMetadata = {
      architecture,
      crashpadDirectory: void 0,
      destinationName: "chrome-linux",
      downloadFileName: process.env.RECORD_REPLAY_CHROMIUM_DOWNLOAD_FILE || "linux-replay-chromium.tar.xz",
      path: ["chrome-linux", "chrome"],
      platform: "linux",
      runtime: "chromium",
      sourceName: "replay-chromium"
    };
    break;
  case "win32":
    if (process.env.REPLAY_WINDOWS_CHROMIUM_OVERRIDE) {
      exports.runtimeMetadata = {
        architecture,
        crashpadDirectory: void 0,
        destinationName: "replay-chromium",
        downloadFileName: process.env.RECORD_REPLAY_CHROMIUM_DOWNLOAD_FILE || "windows-replay-chromium.zip",
        path: ["replay-chromium", "chrome.exe"],
        platform: "windows",
        runtime: "chromium",
        sourceName: "replay-chromium"
      };
    } else {
      console.log("");
      console.log(theme.emphasize("Replay does not support Windows at this time."));
      console.log("Please use the Windows Subsystem for Linux (WSL) instead.");
      process.exit(1);
    }
    break;
  default: {
    throw Error(`Unsupported platform "${process.platform}"`);
  }
}
getReplayPath.getReplayPath("runtimes");
getReplayPath.getReplayPath("runtimes", "metadata.json");
