'use strict';

var launchdarklyNodeClientSdk = require('launchdarkly-node-client-sdk');
var createDeferred = require('./async/createDeferred.js');
var getReplayPath = require('./getReplayPath.js');
var createTaskQueue = require('./session/createTaskQueue.js');

let clientDeferred = createDeferred.createDeferred();
const taskQueue = createTaskQueue.createTaskQueue({
  onDestroy: async () => {
    const client = clientDeferred.resolution;
    if (client) {
      await client.close();
    }
  },
  onInitialize: ({ authInfo }) => {
    let context = {
      anonymous: true
    };
    if (authInfo) {
      context = {
        anonymous: false,
        key: authInfo.id,
        kind: authInfo.type
      };
    }
    const client = launchdarklyNodeClientSdk.initialize("60ca05fb43d6f10d234bb3cf", context, {
      localStoragePath: getReplayPath.getReplayPath("launchdarkly-user-cache"),
      logger: {
        debug() {
        },
        error() {
        },
        info() {
        },
        warn() {
        }
      }
    });
    clientDeferred.resolve(client);
  }
});
async function close() {
  taskQueue.flushAndClose();
}
async function getFeatureFlagValue(flag, defaultValue) {
  await clientDeferred.promise;
  const client = clientDeferred.resolution;
  if (client) {
    await client.waitForInitialization();
    const value = await client.variation(flag, defaultValue);
    return value;
  }
  return defaultValue;
}

exports.close = close;
exports.getFeatureFlagValue = getFeatureFlagValue;
