'use strict';

var mixpanel = require('mixpanel');
var config = require('./config.js');
var logger = require('./logger.js');
var createTaskQueue = require('./session/createTaskQueue.js');

let additionalProperties = {};
let mixpanelClient;
let packageName;
let packageVersion;
if (!config.disableMixpanel) {
  mixpanelClient = mixpanel.init(config.mixpanelToken);
}
const taskQueue = createTaskQueue.createTaskQueue({
  onDestroy: () => {
  },
  onInitialize: ({ packageInfo }) => {
    packageName = packageInfo.packageName;
    packageVersion = packageInfo.packageVersion;
  }
});
function appendAdditionalProperties(properties) {
  Object.assign(additionalProperties, properties);
}
async function closeMixpanel() {
  await taskQueue.flushAndClose();
}
function trackEvent(eventName, properties = {}) {
  if (packageName) {
    const prefix = `${packageName}.`;
    if (!eventName.startsWith(prefix)) {
      eventName = prefix + eventName;
    }
  }
  taskQueue.push(async (authInfo) => {
    logger.logDebug("MixpanelClient:AddToQueue:SendMessage", { eventName, properties });
    const mergedProperties = {
      ...properties,
      ...additionalProperties,
      packageName,
      packageVersion
    };
    if (authInfo?.id) {
      mergedProperties.distinct_id = authInfo.id;
    }
    await new Promise((resolve) => {
      mixpanelClient?.track(eventName, mergedProperties, (error) => {
        if (error) {
          logger.logError("MixpanelClient:AddToQueue:Failed", { eventName, error, properties });
        } else {
          logger.logDebug("MixpanelClient:AddToQueue:Success", { eventName, properties });
        }
        resolve();
      });
    });
  });
}

exports.appendAdditionalProperties = appendAdditionalProperties;
exports.closeMixpanel = closeMixpanel;
exports.trackEvent = trackEvent;
