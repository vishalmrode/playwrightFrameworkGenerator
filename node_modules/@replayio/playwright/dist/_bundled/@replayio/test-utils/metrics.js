'use strict';

var logger = require('../../@replay-cli/shared/logger.js');
var fetch = require('node-fetch');
var os = require('node:os');

function _interopDefault (e) { return e && e.__esModule ? e : { default: e }; }

var fetch__default = /*#__PURE__*/_interopDefault(fetch);
var os__default = /*#__PURE__*/_interopDefault(os);

function shouldReportTestMetrics() {
  const optOut = process.env.RECORD_REPLAY_TEST_METRICS?.toLowerCase();
  return !optOut || !(optOut === "0" || optOut === "false");
}
async function pingTestMetrics(recordingId, runId, test, apiKey) {
  logger.logInfo("PingTestMetrics:Started");
  if (!shouldReportTestMetrics()) return;
  const webhookUrl = process.env.RECORD_REPLAY_WEBHOOK_URL || "https://webhooks.replay.io";
  const body = JSON.stringify({
    type: "test.finished",
    recordingId,
    test: {
      ...test,
      platform: os__default.default.platform(),
      runId,
      env: {
        disableAsserts: !!process.env.RECORD_REPLAY_DISABLE_ASSERTS,
        disableSourcemapCollection: !!process.env.RECORD_REPLAY_DISABLE_SOURCEMAP_COLLECTION,
        disableFeatures: process.env.RECORD_REPLAY_DISABLE_FEATURES || "none"
      }
    }
  });
  logger.logInfo("PingTestMetrics", { body });
  const headers = { "Content-Type": "application/json" };
  if (apiKey) {
    headers.Authorization = `Bearer ${apiKey}`;
  }
  fetch__default.default(`${webhookUrl}/api/metrics`, {
    method: "POST",
    headers,
    body
  }).then(() => logger.logInfo("PingTestMetrics:Succeeded")).catch((error) => logger.logError("PingTestMetrics:Failed", { body, error }));
}

exports.pingTestMetrics = pingTestMetrics;
