'use strict';

var logger = require('../../../@replay-cli/shared/logger.js');
var jsonata = require('jsonata');
var recordingLog = require('./recordingLog.js');

function _interopDefault (e) { return e && e.__esModule ? e : { default: e }; }

var jsonata__default = /*#__PURE__*/_interopDefault(jsonata);

function filterRecordings(recordings, filter, includeCrashes) {
  let filteredRecordings = recordings;
  logger.logInfo("FilterRecordings:Started", {
    numRecordingLogReplays: recordings.length,
    filterType: filter ? typeof filter : void 0
  });
  if (filter && typeof filter === "string") {
    const exp = jsonata__default.default(`$filter($, ${filter})[]`);
    filteredRecordings = exp.evaluate(recordings) || [];
    logger.logInfo("FilterRecordings:UsedString", {
      filteredRecordingsLength: filteredRecordings.length,
      filter
    });
  } else if (typeof filter === "function") {
    filteredRecordings = recordings.filter(filter);
    logger.logInfo("FilterRecordings:UsedFunction", {
      filteredRecordingsLength: filteredRecordings.length
    });
  }
  if (includeCrashes) {
    recordings.forEach((r) => {
      if (r.status === "crashed" && !filteredRecordings.includes(r)) {
        filteredRecordings.push(r);
      }
    });
    logger.logInfo("FilterRecordings:IncludedCrashes", {
      filteredRecordingsLength: filteredRecordings.length
    });
  }
  return filteredRecordings;
}
function listRecording(recording) {
  const { buildId, crashData, ...recordingWithoutInternalProperties } = recording;
  return recordingWithoutInternalProperties;
}
function listAllRecordings(opts = {}) {
  logger.logInfo("ListAllRecordings:Started");
  const recordings = recordingLog.readRecordings();
  if (opts.all) {
    return filterRecordings(recordings, opts.filter, opts.includeCrashes).map(listRecording);
  }
  const uploadableRecordings = recordings.filter(
    (recording) => ["onDisk", "startedWrite", "crashed"].includes(recording.status)
  );
  return filterRecordings(uploadableRecordings, opts.filter, opts.includeCrashes).map(
    listRecording
  );
}

exports.listAllRecordings = listAllRecordings;
